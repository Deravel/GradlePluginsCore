import org.apache.ivy.core.module.descriptor.Artifact
import org.gradle.api.artifacts.maven.MavenDeployment
import org.gradle.api.artifacts.maven.PomFilterContainer
import org.gradle.api.artifacts.maven.PublishFilter
import org.gradle.api.publication.maven.internal.PomFilter

apply plugin: "bancvue-oss"
apply plugin: "integration-test"
apply plugin: "license-ext"
apply plugin: "signing"

repositories {
	mavenCentral()
}

dependencies {
	compile gradleApi()
	compile "org.codehaus.groovy:groovy-all:2.1.2"
	compile "nl.javadude.gradle.plugins:license-gradle-plugin:0.6.0"

	testCompile "junit:junit:4.11"
	testCompile "org.mockito:mockito-all:1.9.5"
}

check.dependsOn integrationTest

license {
	ext.name = "BancVue, LTD"
}

[licenseMain, licenseFormatMain]*.exclude "licenses/*"
// exclude the test kit source which was copied from a different project (https://github.com/alkemist/gradle-test-kit)
// and has it's own license
[licenseMainTest, licenseFormatMainTest]*.exclude "org/gradle/testkit/**"




/**********************************************************************************************************************/
// Everything below is POC

artifacts {
	archives jarMainTest
	archives sourcesJarMainTest
}

signing {
    sign configurations.archives
}

uploadArchives {
	repositories.mavenDeployer {
		beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

		pom.project {
			packaging "jar"
			url "https://github.com/BancVue/GradlePluginsCore"
			developers {
				developer {
					id "bancvue_oss"
					name "BancVue Open Source Development"
					email "opensource@bancvue.com"
				}
			}
			scm {
				url "https://github.com/BancVue/GradlePluginsCore.git"
				connection "scm:git:git@github.com:BancVue/GradlePluginsCore.git"
				developerConnection "scm:git:git@github.com:BancVue/GradlePluginsCore.git"
			}
		}
	}
}

uploadArchives {
	repositories.mavenDeployer {
		addFilter("test") { Artifact artifact, file ->
			(artifact.name =~ /.*-test$/).matches()
		}
		addFilter("default", new DefaultPublishFilter(it))

		getActivePomFilters().each { PomFilter pomFilter ->
			pomFilter.setPomTemplate(pom.effectivePom)
		}
	}
}

install {
	repositories.mavenInstaller {
		addFilter("test") { Artifact artifact, file ->
			(artifact.name =~ /.*-test$/).matches()
		}
		addFilter("default", new DefaultPublishFilter(it))
	}
}

class DefaultPublishFilter implements PublishFilter {

	private PomFilterContainer container

	DefaultPublishFilter(PomFilterContainer container) {
		this.container = container
	}

	@Override
	boolean accept(Artifact artifact, File file) {
		boolean acceptedByExistingFilter = false
		container.activePomFilters.each { PomFilter pomFilter ->
			if (this != pomFilter.filter) {
				acceptedByExistingFilter = acceptedByExistingFilter || pomFilter.filter.accept(artifact, file)
			}
		}
		!acceptedByExistingFilter
	}

}